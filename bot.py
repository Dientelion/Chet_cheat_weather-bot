import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import aiohttp


class BotState:
    """–•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    def __init__(self):
        self.mode = 'greeting'
        self.sunrise = ''
        self.sunset = ''


# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def get_user_state(user_id: int) -> BotState:
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = BotState()
    return user_states[user_id]


TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OWM_API_KEY = os.environ.get("OWM_API_KEY")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)


async def fetch_geo_data(session: aiohttp.ClientSession, city: str) -> dict:
    """–ó–∞–ø—Ä–æ—Å –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫"""
    geo_url = (
        "http://api.openweathermap.org/geo/1.0/direct"
        f"?q={city}&limit=1&appid={OWM_API_KEY}"
    )
    async with session.get(geo_url) as response:
        if response.status != 200:
            raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö")

        data = await response.json()
        if not data:
            raise ValueError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return data[0]


async def fetch_weather_data(session: aiohttp.ClientSession, lat: float, lon: float) -> dict:
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫"""
    weather_url = (
        "https://api.openweathermap.org/data/2.5/weather"
        f"?lat={lat}&lon={lon}&units=metric&appid={OWM_API_KEY}"
    )
    async with session.get(weather_url) as response:
        if response.status != 200:
            raise ValueError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
        return await response.json()


async def send_weather(city: str, chat_id: int, user_id: int) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
            geo_data = await fetch_geo_data(session, city)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
            weather = await fetch_weather_data(
                session,
                geo_data['lat'],
                geo_data['lon']
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
            icon_code = weather['weather'][0].get('icon', '')
            icon_url = f"http://openweathermap.org/img/wn/{icon_code}@4x.png"
            await bot.send_photo(chat_id, icon_url)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            main_data = weather.get('main', {})
            wind_data = weather.get('wind', {})

            temp = main_data.get('temp', 'N/A')
            pressure = int(main_data.get('pressure', 0) * 0.75)
            wind = wind_data.get('speed', 'N/A')

            weather_message = (
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                f"üìâ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç.—Å—Ç.\n"
                f"üå™ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
            )
            await bot.send_message(chat_id, weather_message)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            sys_data = weather.get('sys', {})
            timezone = weather.get('timezone', 0)

            state = get_user_state(user_id)
            state.sunrise = datetime.utcfromtimestamp(
                sys_data.get('sunrise', 0) + timezone
            ).strftime('%H:%M')

            state.sunset = datetime.utcfromtimestamp(
                sys_data.get('sunset', 0) + timezone
            ).strftime('%H:%M')

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton('–î–∞ ‚úÖ', callback_data='yes'),
                types.InlineKeyboardButton('–ù–µ—Ç ‚ùå', callback_data='no'),
                types.InlineKeyboardButton('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='start')
            )
            await bot.send_message(
                chat_id,
                "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞ –∏ –∑–∞–∫–∞—Ç–∞?",
                reply_markup=keyboard
            )
            state.mode = 'sun_question'

    except Exception as error:
        error_message = "üò¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"
        if str(error) == "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω":
            error_message = "üèô –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π"

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data='start'))
        await bot.send_message(chat_id, error_message, reply_markup=keyboard)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    state = get_user_state(message.from_user.id)
    state.mode = 'city_choice'

    cities = [
        ('üèô –ú–æ—Å–∫–≤–∞', 'Moscow'),
        ('üåÜ –ö–µ–π–ø—Ç–∞—É–Ω', 'Cape Town'),
        ('üóΩ –ù—å—é-–ô–æ—Ä–∫', 'New York'),
        ('üåÉ –®–∞–Ω—Ö–∞–π', 'Shanghai'),
        ('‚úèÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', 'other'),
        ('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'start')
    ]

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for city_name, callback_data in cities:
        keyboard.add(types.InlineKeyboardButton(city_name, callback_data=callback_data))

    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)


@dp.message_handler(content_types=['text'])
async def text_message(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    state = get_user_state(message.from_user.id)
    if state.mode == 'other_city':
        await send_weather(
            message.text.strip(),
            message.chat.id,
            message.from_user.id
        )


@dp.callback_query_handler()
async def button_click(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    user_id = call.from_user.id
    state = get_user_state(user_id)

    if call.data == 'start':
        await start_command(call.message)
        return

    if state.mode == 'city_choice':
        if call.data == 'other':
            await bot.send_message(
                call.message.chat.id,
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
            )
            state.mode = 'other_city'
        else:
            await send_weather(
                call.data,
                call.message.chat.id,
                user_id
            )

    elif state.mode == 'sun_question':
        if call.data == 'yes':
            message_text = (
                f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {state.sunrise}\n"
                f"üåá –ó–∞–∫–∞—Ç: {state.sunset}"
            )
            await bot.send_message(call.message.chat.id, message_text)

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='start'))
        await bot.send_message(
            call.message.chat.id,
            "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å?",
            reply_markup=keyboard
        )
        state.mode = 'city_choice'


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
